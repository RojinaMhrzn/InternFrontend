{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["Square","className","buttonNumber","handleClick","type","onClick","Board","board","squareClick","isWinner","winners","SquareType","i","classType","console","log","win","some","winner","map","number","TicTacToe","useState","squares","Array","fill","history","setHistory","move","setMove","turn","setTurn","isNext","length","one","two","three","boardOne","CalculateWinner","whoWin","nturn","current","slice","currentHistory","newArr","prevHistory","newHistory","prevMove","prev","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","App","document","getElementById"],"mappings":"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","file":"static/js/main.69e894fa.chunk.js","sourcesContent":["import React, { useState } from \"react\";\nimport \"./tictac.css\";\n\nexport function CalculateWinner(board) {\n  const winners = [\n    [0, 1, 2],\n    [3, 4, 5],\n    [6, 7, 8],\n    [0, 3, 6],\n    [1, 4, 7],\n    [2, 5, 8],\n    [0, 4, 8],\n    [2, 4, 6]\n  ];\n\n  for (let i = 0; i < winners.length; i++) {\n    const [one, two, three] = winners[i];\n    const boardOne = board[one];\n    console.log(board[one]);\n    console.log(winners[i]);\n    if (boardOne && boardOne === board[two] && boardOne === board[three]) {\n      return [true, boardOne, [one, two, three]];\n    }\n  }\n\n  return [false, \"\", []];\n}\n\nexport function Square({ className, buttonNumber, handleClick }) {\n  return (\n    <button type=\"button\" className={className} onClick={handleClick}>\n      <span>{buttonNumber}</span>\n    </button>\n  );\n}\n\nexport function Board({ board, squareClick, isWinner, winners }) {\n  const SquareType = i => {\n    const classType = type => {\n      console.log({i});\n    console.log({type});\n      return `number ${i} ${type}`;\n    };\n    \n    let win = winners.some(winner => winner === i);\n    if (isWinner) {\n      if (win) {\n        return classType(\"winner\");\n      }\n    }\n    return classType(\"lose\");\n  };\n\n  return (\n    <div className=\"board\">\n      {board.map((number, i) => {\n        return (\n          <Square\n            key={i}\n            className={SquareType(i)}\n            buttonNumber={number}\n            handleClick={() => squareClick(i)}\n          />\n        );\n      })}\n    </div>\n  );\n}\n\nfunction TicTacToe() {\n  let [history, setHistory] = useState([\n    {\n      squares: Array(9).fill(null)\n    }\n  ]);\n  let [move, setMove] = useState(0);\n  let [turn, setTurn] = useState(false);\n\n  let isNext = turn ? \"O\" : \"X\";\n\n  let currentSquares = history[move].squares;\n  let [isWinner, whoWin, winners] = CalculateWinner(currentSquares);\n\n  let nturn = <h2 className=\"turn\">Next turn? {isNext}</h2>;\n  let winner = <h2 className=\"winner-header\"> Winner {whoWin}</h2>;\n\n  function handleSquareClick(i) {\n    let current = history.slice(0, move + 1);\n    let currentHistory = current[move].squares;\n    const newArr = [...currentHistory];\n    newArr[i] = isNext;\n    setHistory(prevHistory => {\n      let newHistory = {\n        squares: newArr\n      };\n      return [...current, newHistory];\n    });\n    setMove(prevMove => {\n      return prevMove + 1;\n    });\n    setTurn(prev => !prev);\n  }\n\n  // function handleMove(i) {\n  //   setMove(i);\n  //   setTurn(prev => !prev);\n  // }\n\n  function handleClear() {\n    setHistory([{ squares: Array(9).fill(null) }]);\n    setMove(0);\n  }\n\n  // function handleClick(i) {\n  //   const squares = this.state.squares.slice();\n  //   if (calculateWinner(squares) || squares[i]) {     \n  //      return;    \n  //     }    \n  //      squares[i] = this.state.xIsNext ? 'X' : 'O';\n  //   this.setState({\n  //     squares: squares,\n  //     xIsNext: !this.state.xIsNext,\n  //   });\n  // }\n\n  return (\n    <div className=\"App\">\n      <header className=\"AppHeader\">\n        <h1 className=\"title\">TIC TAC TOE </h1>\n        {isWinner ? winner : nturn}\n      </header>\n      <section className=\"clear-game\">\n        <button className=\"clear-btn\" onClick={handleClear}>\n          clear game\n        </button>\n      </section>\n      <div className=\"game\">\n        <div className=\"steps-moves\">\n          <Board\n            board={history[move].squares}\n            squareClick={handleSquareClick}\n            isWinner={isWinner}\n            winners={winners}\n          />\n        </div>\n        \n      </div>\n    </div>\n  );\n}\n\nexport default TicTacToe;\n\n\n\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}